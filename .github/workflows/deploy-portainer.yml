name: Trigger Portainer Build

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Portainer Stack Update
        env:
          PORTAINER_URL: 'https://5.161.118.67:9443'
          PORTAINER_USER: ${{ secrets.PORTAINER_USER }}
          PORTAINER_PASS: ${{ secrets.PORTAINER_PASS }}
          STACK_ID: ${{ secrets.PORTAINER_STACK_ID }}
          ENDPOINT_ID: ${{ secrets.PORTAINER_ENDPOINT_ID }}
        run: |
          # Debug output for secrets
          echo "Using Stack ID: $STACK_ID"
          echo "Using Endpoint ID: $ENDPOINT_ID"
          
          # Get JWT token with error handling
          echo "Attempting authentication..."
          response=$(curl -k -s -X POST "$PORTAINER_URL/api/auth" \
            -H "Content-Type: application/json" \
            -d "{\"Username\":\"$PORTAINER_USER\",\"Password\":\"$PORTAINER_PASS\"}")
          
          # Check if jq is available and parse JWT
          if ! command -v jq &> /dev/null; then
            echo "❌ jq command not found. Cannot parse JWT."
            exit 1
          fi
          jwt=$(echo "$response" | jq -r '.jwt')

          # Validate JWT - Moved this check *before* the success message
          if [ -z "$jwt" ] || [ "$jwt" = "null" ]; then
            echo "❌ Authentication failed. Response: $response"
            exit 1
          fi
                    
          # If we reach here, authentication was successful
          echo "✅ Successfully obtained JWT token"
          # --- Debug: Show beginning of JWT ---
          echo "JWT (start): ${jwt:0:10}..." 
          # ------------------------------------

          # --- Clean potential hidden characters from IDs AND URL ---
          CLEAN_PORTAINER_URL=$(echo "$PORTAINER_URL" | tr -d '\r\n[:space:]')
          CLEAN_STACK_ID=$(echo "$STACK_ID" | tr -d '\r\n[:space:]')
          CLEAN_ENDPOINT_ID=$(echo "$ENDPOINT_ID" | tr -d '\r\n[:space:]')
          # -------------------------------------------------------

          # Trigger stack update with validation using cleaned IDs
          if [ -z "$CLEAN_STACK_ID" ] || [ -z "$CLEAN_ENDPOINT_ID" ] || [ -z "$CLEAN_PORTAINER_URL" ]; then
            echo "❌ Missing or invalid URL, Stack ID or Endpoint ID after cleaning. Check GitHub Secrets."
            exit 1
          fi
          
          echo "Triggering redeploy of stack $CLEAN_STACK_ID..."
          # Print the cleaned URL
          CONSTRUCTED_URL="$CLEAN_PORTAINER_URL/api/stacks/$CLEAN_STACK_ID/git/redeploy?endpointId=$CLEAN_ENDPOINT_ID"
          echo "Constructed URL (Cleaned): $CONSTRUCTED_URL"
          
          # --- Temporarily hardcode the URL for debugging using CLEAN_PORTAINER_URL ---
          echo "Attempting curl with hardcoded URL..."
          HARDCODED_URL="$CLEAN_PORTAINER_URL/api/stacks/18/git/redeploy?endpointId=3" 
          echo "Hardcoded URL: $HARDCODED_URL"
          # -------------------------------------------------------------------------

          # Use the HARDCODED URL in the curl command
          # Added single quotes around the URL just in case, though double quotes should work
          curl -k -v -X POST \  
            '$HARDCODED_URL' \ 
            -H "Authorization: Bearer $jwt" \
            -H "Content-Type: application/json"
          
          # Check curl exit status
          CURL_EXIT_CODE=$?
          if [ $CURL_EXIT_CODE -ne 0 ]; then
            # Added more specific error message for URL issues
            if [ $CURL_EXIT_CODE -eq 3 ]; then 
              echo "❌ Final curl command failed with exit code 3 (URL Malformed). Check URL components and JWT."
            else
              echo "❌ Final curl command failed with exit code $CURL_EXIT_CODE"
            fi
            exit $CURL_EXIT_CODE
          else
            echo "✅ Final curl command succeeded."
          fi

